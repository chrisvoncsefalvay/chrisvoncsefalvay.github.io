---
categories:
- Quarto
citation: true
date: 2023-11-13
description: 'Oh, that''s mint. We can finally use Rogue Scholar to mint DOIs for
  Quarto posts and append them automagically.

  '
format:
  html:
    code-overflow: wrap
google-scholar: true
title: Auto-DOI for Quarto posts via Rogue Scholar
---

I love posts that allow me to merge some of my addictions. In this case, it's my love for Quarto project scripts (which I've [written about elsewhere](../quarto-project-scripts)), my fondness for [Rogue Scholar](https://rogue-scholar.org) and the overuse of the word 'mint' to mean 'generally really quite rather nice'.

[Rogue Scholar](https://rogue-scholar.org) is a fantastic tool for science bloggers, and while it's a little artisanal (i.e. hand-made much of the time) at this point, it's got some really cool automated features. One is that it registers (mints, hence the abundance of lame peppermint puns across this post) DOIs for your posts. 

I've been using Rogue Scholar to mint DOIs for my posts for a while now, but it's always been a bit of a manual process. I'd have to wait for a while for the post to go on the Rogue Scholar feed, then copy/paste the DOI, then copy the DOI into the YAML front matter. It's not a lot of work, but it's a bit of a pain. I've been meaning to automate it for a while, but I've been busy with other things.

This weekend, I was laid up with being on the receiving end (for once) of the bounties of a clinical trial, so I've decided to finally build it. It's a bit of a hack, but it works.

```{mermaid}
%%| label: fig-auto-doi
%%| fig-cap: Auto-DOI flow chart.
%%| fig-align: center

flowchart TD
    linkStyle default interpolate basis
    A["Get last 10 posts with DOIs from RS"]
    
    subgraph loop["Loop through posts"]
    B["Read YAML preface"] --> C{"Is post a cross-post?"}
    C -->|yes| skip
    C -->|no| D{"Is post citeable?"}
    D -->|no| skip
    D -->|yes| E{"Do we have a DOI?"}
    E -->|no| skip
    E ---->|yes| F["Get DOI"]    
    end

    A -----> E
    F --> apploop["Append loop to YAML"]
    apploop --> write["Write YAML"]
    write --> qr["Quarto Render"]
    write --> ghc["Github commit action"]
```

First, we scrape Rogue Scholar for titles and DOIs. Rogue Scholar's CSS isn't really helpful here, as the link isn't a particular class/id of its own   as far as I could discern, so I just grabbed the link by the fact that only DOI links are formatted like DOI links. Not the most elegant way, but it does the job.

```{#lst-getting-dois .python lst-cap="Getting the DOIs from Rogue Scholar."}

def scrape_blog_for_dois(url) -> Dict[str, str]:
    response = requests.get(url)
    soup = BeautifulSoup(response.content, 'html.parser')
    articles = soup.select('article')[:10] # <1>
    
    posts_with_dois = {}
    
    for article in articles:
        title = article.select_one('h3').text
        doi_link = next((a['href'] for a in article.select('a') if a['href'].startswith('https://doi.org')), None)
        if doi_link:
            doi = doi_link.split('https://doi.org/')[1] # <2>
        else:
            doi = None
        posts_with_dois[title] = doi

    logging.info(f"Found {len(posts_with_dois)} posts with DOIs:")
    for title, doi in posts_with_dois.items():
        logging.info(f"{title}: {doi}")
    return posts_with_dois
```
1. Technically unnecessary, as Rogue Scholar currently only displays ten links, but hey.
2. This is where we split the DOI link into the link prefix and the DOI. We don't need the prefix, so we just grab the second part of the split.


Next, we iterate through each blog post. This is actually quite fast, since (1) we have relatively few of them, (2) they're text documents. We parse the YAML preface at the beginning of each of them. This looks something like this:

```{#lst-preamble .yaml lst-cap="Pre-DOI YAML preamble example."}
